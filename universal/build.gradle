import com.github.jengelman.gradle.plugins.shadow.relocation.SimpleRelocator
import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
import com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext
import shadow.org.apache.tools.zip.ZipEntry

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.util.regex.Pattern


class NettyEpollTransformer implements Transformer {
    private java.nio.file.Path extractedNettyNative

    boolean canTransformResource(FileTreeElement element) {
        return element.name.endsWith("libnetty_transport_native_epoll_x86_64.so")
    }

    void transform(TransformerContext context) {
        this.extractedNettyNative = Files.createTempFile("nuvotifer_build", ".so")
        Files.copy(context.is, this.extractedNettyNative, StandardCopyOption.REPLACE_EXISTING)
    }

    boolean hasTransformedResource() { this.extractedNettyNative != null }

    void modifyOutputStream(shadow.org.apache.tools.zip.ZipOutputStream jos, boolean preserveFileTimestamps) {
        ZipEntry entry = new ZipEntry("META-INF/native/libcom_vexsoftware_votifier_netty_transport_native_epoll_x86_64.so")
        entry.time = TransformerContext.getEntryTimestamp(preserveFileTimestamps, entry.time)
        jos.putNextEntry(entry)
        Files.copy(this.extractedNettyNative, jos)
        Files.delete(this.extractedNettyNative)
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation project(":nuvotifier-api")
    implementation project(":nuvotifier-common")
    implementation project(":nuvotifier-bukkit")
    implementation project(":nuvotifier-bungeecord")
    implementation project(":nuvotifier-sponge")
    implementation project(":nuvotifier-velocity")
}

shadowJar {
    archiveBaseName.set('nuvotifier')
    archiveClassifier.set('')
    relocate "io.netty", "com.vexsoftware.votifier.io.netty"
    relocate "org.json", "com.vexsoftware.votifier.json"
    relocate new SimpleRelocator("com.google.code", "com.vexsoftware.votifier.google.code", new ArrayList<String>(), Collections.singletonList("com.vexsoftware.votifier.sponge"))
    relocate "com.google.gson", "com.vexsoftware.votifier.google.gson"
    relocate "org.apache.commons.io", "com.vexsoftware.votifier.commons.io"

    transform(NettyEpollTransformer.class)
}

artifacts {
    tasks.shadowJar.outputs.files.each {
        archives(it) {
            builtBy shadowJar
        }
    }
}

def artifactPattern = Pattern.compile(/(.*)-([0-9]+\.)*[0-9]+(-SNAPSHOT)?\.jar/)

task('linkLatest') {
    dependsOn tasks.shadowJar
    doLast {
        tasks.shadowJar.outputs.files.each {
            System.println(it.path)
            def noVerMatcher = artifactPattern.matcher(it.path)
            if (!noVerMatcher.matches())
                throw new IllegalStateException("wtf")

            def noVer = Paths.get(noVerMatcher.group(1) + ".jar")
            def versnd = it.toPath()
            Files.copy(versnd, noVer, StandardCopyOption.REPLACE_EXISTING)
        }
    }
}

build.dependsOn linkLatest
